# TAGS
    # elif db.get_state(user_id) == "edit" and message.text == "–¢–µ–≥–∏":
    #     db.replace_state(user_id, "tags")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=TAGS_KB)
    # elif db.get_state(user_id) == "tags" and message.text == "–ù–∞–∑–∞–¥üîô":
    #     db.replace_state(user_id, "wait")
    #     await message.reply(f"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MENU_KB)
    # # del tag
    # elif db.get_state(user_id) == "tags" and message.text == "–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥":
    #     db.replace_state(user_id, "del_tag")
    #     await message.reply(f"–¢–ï–ì–ò:\n{db.get_my_profile(user_id)[7]}\n-----------------\n"
    #                         f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "del_tag":
    #     ans = message.text
    #     if ans in db.get_tags(user_id).split(", "):
    #         db.replace_state(user_id, "tags")
    #         tags_list = db.get_tags(user_id).split(", ")
    #         tags_list.remove(ans)
    #         db.add_tags(user_id, ", ".join(tags_list))
    #         await message.reply(f"–¢–µ–≥ —É–¥–∞–ª—ë–Ω\n---------------\n{get_profile(user_id)}", reply_markup=TAGS_KB)
    #     else:
    #         db.replace_state(user_id, "tags")
    #         await message.reply(f"–î–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ—Ç", reply_markup=TAGS_KB)
    # # -----
    # elif db.get_state(user_id) == "tags" and message.text == "–ò–Ω—Ç–µ—Ä–µ—Å—ã":
    #     db.replace_state(user_id, "edit_interests")
    #     tags = Read_tags("other/interests.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_interests":
    #     ans = message.text
    #     tags = Read_tags("other/interests.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–ú—É–∑—ã–∫–∞":
    #     db.replace_state(user_id, "edit_music")
    #     tags = Read_tags("other/music.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_music":
    #     ans = message.text
    #     tags = Read_tags("other/music.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–§–∏–ª—å–º—ã":
    #     db.replace_state(user_id, "edit_films")
    #     tags = Read_tags("other/films.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_films":
    #     ans = message.text
    #     tags = Read_tags("other/films.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–°–µ—Ä–∏–∞–ª—ã":
    #     db.replace_state(user_id, "edit_series")
    #     tags = Read_tags("other/series.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_films":
    #     ans = message.text
    #     tags = Read_tags("other/series.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–ö–Ω–∏–≥–∏":
    #     db.replace_state(user_id, "edit_books")
    #     tags = Read_tags("other/books.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_books":
    #     ans = message.text
    #     tags = Read_tags("other/books.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–ò–≥—Ä—ã":
    #     db.replace_state(user_id, "edit_games")
    #     tags = Read_tags("other/games.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_games":
    #     ans = message.text
    #     tags = Read_tags("other/games.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–ï–¥–∞":
    #     db.replace_state(user_id, "edit_food")
    #     tags = Read_tags("other/food.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_food":
    #     ans = message.text
    #     tags = Read_tags("other/food.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    # elif db.get_state(user_id) == "tags" and message.text == "–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è":
    #     db.replace_state(user_id, "edit_lifepos")
    #     tags = Read_tags("other/lifepos.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_lifepos":
    #     ans = message.text
    #     tags = Read_tags("other/lifepos.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏":
    #     db.replace_state(user_id, "edit_needs")
    #     tags = Read_tags("other/needs.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_needs":
    #     ans = message.text
    #     tags = Read_tags("other/needs.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    #
    # elif db.get_state(user_id) == "tags" and message.text == "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏":
    #     db.replace_state(user_id, "edit_lifestyle")
    #     tags = Read_tags("other/lifestyle.txt")
    #     await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
    #                         f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    # elif db.get_state(user_id) == "edit_lifestyle":
    #     ans = message.text
    #     tags = Read_tags("other/lifestyle.txt")
    #     if correct_input_tags(ans, tags, user_id):
    #         db.replace_state(user_id, "wait")
    #         if db.get_tags(user_id) is not None:
    #             db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
    #         else:
    #             db.add_tags(user_id, ans)
    #         await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
    #     else:
    #         await message.reply(
    #             f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")






 # freeze and active profile
    # elif db.get_state(user_id) == "wait" and message.text == "–°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É":
    #     db.replace_active(user_id, "False")
    #     await message.reply(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–∫—Ä—ã—Ç–∞. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏.\n"
    #                         f"–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –í–∞—Å –Ω–µ –≤–∏–¥—è—Ç.\n"
    #                         f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∫ –Ω–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
    #                         reply_markup=ACTIVE_KB)
    # elif db.get_state(user_id) == "wait" and message.text == "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å":
    #     db.replace_active(user_id, "True")
    #     await message.reply(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ!", reply_markup=MENU_KB)







# TAGS_KB = ReplyKeyboardMarkup(resize_keyboard=True)
# TAGS_KB.add(INTERESTS_BTN, LIFESTYLE_BTN, LIFEPOS_BTN, NEEDS_BTN, MUSIC_BTN, FILMS_BTN, BOOKS_BTN, GAMES_BTN,
# FOOD_BTN, DEL_TAGS, BACK_BTN)
# ACTIVE_KB = ReplyKeyboardMarkup(resize_keyboard=True)





# INTERESTS_BTN = KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã")
# LIFESTYLE_BTN = KeyboardButton("–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏")
# LIFEPOS_BTN = KeyboardButton("–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
# NEEDS_BTN = KeyboardButton("–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")
# MUSIC_BTN = KeyboardButton("–ú—É–∑—ã–∫–∞")
# FILMS_BTN = KeyboardButton("–§–∏–ª—å–º—ã")
# BOOKS_BTN = KeyboardButton("–ö–Ω–∏–≥–∏")
# GAMES_BTN = KeyboardButton("–ò–≥—Ä—ã")
# FOOD_BTN = KeyboardButton("–ï–¥–∞")
# DEL_TAGS = KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥")

def correct_input_tags(ans, rd, user_id):
    ans_list = ans.split(", ")
    rd_list = list(map(lambda s: s.replace("\n", ""), rd.get_tags_list()))
    print(ans_list)
    print(rd_list)
    for tag in ans_list:
        if tag not in rd_list:
            return False
    return True