from cities import Cities
from database import Database

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

TOKEN = "6167157380:AAEBoL1PRfL4HlauT1MOyTPHlbos_E9C9Sg"
cities_obj = Cities("other/russia.json")
CITIES = cities_obj.get_cities()
db = Database("user.db")
TAGS_STR = "–ú–µ–ª–æ–º–∞–Ω0\n–õ—é–±–∏—Ç–µ–ª—å –∫–∏–Ω–æ0\n–ì–∏–∫0\n–ì–µ–π–º–µ—Ä0\n–õ—é–±–∏—Ç–µ–ª—å –∞–Ω–∏–º–µ0\n–ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å0\n–ì—É—Ä–º–∞–Ω0\n–õ—é–±–∏—Ç–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–∞0\n" \
           "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫0\n–õ—é–±–∏—Ç–µ–ª—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π0\n–õ—é–±–∏—Ç–µ–ª—å –Ω–∞—É–∫–∏0\n–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å0\n–õ—é–±–∏—Ç–µ–ª—å —Å–ø–æ—Ä—Ç–∞0\n" \
           "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫0\n–ú–æ–¥–Ω–∏–∫0\n–õ—é–±–∏—Ç–µ–ª—å –∫–æ—à–µ–∫0\n–õ—é–±–∏—Ç–µ–ª—å —Å–æ–±–∞–∫0\n–°—Ç—É–¥–µ–Ω—Ç0\n–¢—Ä—É–¥–æ–≥–æ–ª–∏–∫0\n–ú–µ–º–æ–ª–æ–≥0\n–ë—É–¥—É—â–∏–π –ø–æ–ª–∏–≥–ª–æ—Ç0\n" \
           "–î—É—Ö–æ–≤–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å0\n–î–∏–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏—Ç–æ–ª–æ–≥0\n–ö—É—Ä—é0\n–ü—å—é0"
MBTI1 = "–ì—Ä–∏—à–∞:\n" \
        "–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –∞–∫—Ç–∏–≤–Ω—ã–π\n" \
        "–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –º–∏—Ä –∏ —Å–æ–±—ã—Ç–∏—è–ë—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–æ–≤—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º –∏ –ª—é–¥—è–º\n" \
        "–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏\n\n" \
        "–°–∞—à–∞:\n–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–µ –≥—Ä—É–ø–ø—ã –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏\n" \
        "–¢—Ä–∞—Ç–∏—Ç –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑\n" \
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∏—Ö–æ–π –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–π –≤ –æ–±—â–µ–Ω–∏–∏\n" \
        "–ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏\n\n"

MBTI2 = "–ì—Ä–∏—à–∞:\n" \
        "–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ–±—â–∏–µ –∏–¥–µ–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n" \
        "–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n" \
        "–†–∞–∑–º—ã—à–ª—è–µ—Ç –æ –±—É–¥—É—â–µ–º –∏ —Ç–æ–º, —á—Ç–æ –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å\n" \
        "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ç–µ–æ—Ä–∏–∏ –∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è\n\n" \
        "–°–∞—à–∞:\n" \
        "–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª—è—Ö\n" \
        "–û–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –æ–ø—ã—Ç –∏ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π\n" \
        "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n" \
        "–ò–º–µ–µ—Ç –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º\n\n"

MBTI3 = "–ì—Ä–∏—à–∞:\n" \
        "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è, –∏—Å—Ö–æ–¥—è –∏–∑ –ª–∏—á–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —á—É–≤—Å—Ç–≤\n" \
        "–ß—É—Ç–∫–∏–π –∫ —ç–º–æ—Ü–∏—è–º –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π\n" \
        "–°—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–æ–∫—Ä—É–≥ —Å–µ–±—è\n" \
        "–î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ–Ω –∏ —É–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã\n\n" \
        "–°–∞—à–∞:\n" \
        "–î–µ–ª–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞" \
        "\n–¶–µ–Ω–∏—Ç —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä—è–º–æ—Ç—É" \
        "\n–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤–∏–¥–∏—Ç –∫–∞–∫ –≤—ã–∑–æ–≤—ã, –∞ –Ω–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è" \
        "\n–ò—â–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"

MBTI4 = "–ì—Ä–∏—à–∞:" \
        "\n–ì–∏–±–∫–∏–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º" \
        "\n–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è" \
        "\n–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω—ã" \
        "\n–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –≤ –º–µ–Ω–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö" \
        "\n\n–°–∞—à–∞:" \
        "\n–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏ —Å—Ç–∞–≤–∏—Ç —Ü–µ–ª–∏ –Ω–∞ –±—É–¥—É—â–µ–µ" \
        "\n–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —á–µ—Ç–∫–∏–µ —Ä–∞–º–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫" \
        "\n–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞" \
        "\n–°—Ç–∞—Ä–∞–µ—Ç—Å—è –¥–æ–≤–æ–¥–∏—Ç—å –Ω–∞—á–∞—Ç–æ–µ –¥–µ–ª–æ –¥–æ –∫–æ–Ω—Ü–∞\n\n"

MBTI5 = "‚Ä¢–°–∫–ª–æ–Ω–µ–Ω –∫ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –∏ —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–µ" \
        "\n–ë–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è –æ —Ç–æ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ –º–æ–≥—É—Ç –æ –Ω–µ–º –¥—É–º–∞—Ç—å" \
        "\n–í–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ —Å—Ç—Ä–µ—Å—Å—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º" \
        "\n–°—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–≤–æ–∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤" \
        "\n\n–°–∞—à–∞:" \
        "\n–û–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è" \
        "\n–ú–µ–Ω—å—à–µ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –º–Ω–µ–Ω–∏–∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö" \
        "\n–õ–µ–≥–∫–æ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å –∏ –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á" \
        "\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å—á–∏—Ç–∞—è –∏—Ö –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏\n\n"

# FUNCTION
def correct_name(name):
    if len(name) <= 10 and name[0].isupper():
        return True
    return False


def get_profile(user_id):
    profile_list = db.get_my_profile(user_id)
    return f"{profile_list[2]}\n{profile_list[3]}\n{profile_list[4]}\n{profile_list[5]}\n" \
           f"{profile_list[6]}\n{profile_list[7]}"


def profile_kb(user_id):
    CHECK_PROFILES_KB = InlineKeyboardMarkup(row_width=1)

    for i in range(1, 11):
        profile = db.get_random_profile(user_id)
        CHECK_PROFILES_KB.add(InlineKeyboardButton(profile[1] + " " + profile[6], callback_data=f'user{i}'))

    return CHECK_PROFILES_KB


def get_tags(tags_list):
    TAGS_KB = InlineKeyboardMarkup(row_width=2)

    for tag_tuple in tags_list:
        if tag_tuple[1] == 0:
            TAGS_KB.add(InlineKeyboardButton(tag_tuple[0], callback_data=tag_tuple[0]))
        else:
            TAGS_KB.add(InlineKeyboardButton(tag_tuple[0] + "‚úÖ", callback_data=tag_tuple[0]))

    return TAGS_KB


def list_tags_to_str(tags_list):
    tags = ""
    for t in tags_list:
        tags += t[0] + t[1] + "\n"
    return tags


def str_tags_to_list(tags_str):
    l = tags_str.split("\n")
    list_ = []
    for s in l:
        list_.append((s[:len(s)-1], int(s[-1])))
    return list_


# BUTTONS
FORM_BTN = KeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
EDIT_NAME_BTN = KeyboardButton("–ò–º—è")
EDIT_CITY_BTN = KeyboardButton("–ì–æ—Ä–æ–¥")
EDIT_AGE_BTN = KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç")
EDIT_DESC_BTN = KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ")
EDIT_MBTI_BTN = KeyboardButton("MBTI")
MBTI_AGAIN_BTN = KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
EDIT_TAGS_BTN = KeyboardButton("–¢–µ–≥–∏")
SEARCH_BTN = KeyboardButton("–ü–æ–∏—Å–∫üîé")
PROFILE_BTN = KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—åüìù")
MATCH_BTN = KeyboardButton("Matchüë•")
HELP_BNT = KeyboardButton("–ü–æ–º–æ—â—åüí¨")
ONE_BTN = KeyboardButton("1Ô∏è‚É£")
TWO_BTN = KeyboardButton("2Ô∏è‚É£")
BACK_BTN = KeyboardButton("–ù–∞–∑–∞–¥üîô")
LIKE_BTN = KeyboardButton("‚ù§")
SKIP_BTN = KeyboardButton("‚ùå")
END_TAGS_BTN = KeyboardButton("–í—ã–±—Ä–∞–ª")

# KEYBOARDS
FORM_KB = ReplyKeyboardMarkup(resize_keyboard=True)
FORM_KB.add(FORM_BTN)
MENU_KB = ReplyKeyboardMarkup(resize_keyboard=True)
MENU_KB.add(SEARCH_BTN, MATCH_BTN, HELP_BNT, PROFILE_BTN)
CHECK_USERS = ReplyKeyboardMarkup(resize_keyboard=True)
EDIT_PROFILE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
EDIT_PROFILE_KB.add()

HELP_KB = ReplyKeyboardMarkup(resize_keyboard=True)
HELP_KB.add(BACK_BTN)

PROFILE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
PROFILE_KB.add(EDIT_NAME_BTN, EDIT_CITY_BTN, EDIT_AGE_BTN, EDIT_DESC_BTN, EDIT_MBTI_BTN)

EDIT_MBTI_KB = ReplyKeyboardMarkup(resize_keyboard=True)
EDIT_MBTI_KB.add(MBTI_AGAIN_BTN, BACK_BTN)

RATE_PROFILE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
RATE_PROFILE_KB.add(LIKE_BTN, SKIP_BTN)
MBTI_KB = ReplyKeyboardMarkup(resize_keyboard=True)
MBTI_KB.add(ONE_BTN, TWO_BTN)

TAGS_KB = ReplyKeyboardMarkup(resize_keyboard=True)
TAGS_KB.add(END_TAGS_BTN)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    db.add_user_state(user_id, "start", "False")
    db.add_user(user_id, username)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.username}!\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã "
                        f"–º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", reply_markup=FORM_KB)


@dp.message_handler(commands=['menu'])
async def menu_(message: types.Message):
    user_id = message.from_user.id
    db.replace_state(user_id, "wait")
    await message.reply(f"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MENU_KB)


@dp.message_handler()
async def info(message: types.Message):
    user_id = message.from_user.id
    # Input profile
    if message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É" and db.get_state(user_id) == "start":
        db.replace_state(user_id, "name")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "name":
        if correct_name(message.text):
            db.replace_state(user_id, "city")
            db.replace_name(user_id, message.text)
            await message.reply("–í–∞—à–µ –∏–º—è –ø—Ä–∏–Ω—è—Ç–æ!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        else:
            await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
    elif db.get_state(user_id) == "city":
        if message.text in CITIES:
            db.replace_state(user_id, "age")
            db.replace_city(user_id, message.text);
            await message.reply("–í–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        else:
            await message.reply(f"–ì–æ—Ä–æ–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n{', '.join(CITIES)}")
    elif db.get_state(user_id) == "age":
        if message.text.isdigit() and 18 <= int(message.text) <= 80:
            db.replace_state(user_id, "description")
            db.replace_age(user_id, message.text);
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ")
    elif db.get_state(user_id) == "edit_mbti" and message.text == "–ù–∞–∑–∞–¥üîô":
        db.replace_state(user_id, "edit")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:  ", reply_markup=PROFILE_KB)
    elif db.get_state(user_id) == "description" or db.get_state(user_id) == "edit_mbti":
        if message.text != "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
            db.replace_description(user_id, message.text)
        db.replace_state(user_id, "mbti_ans1")
        db.replace_mbti(user_id, "")
        await message.reply(MBTI1 + "1Ô∏è‚É£–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç  üÜö  –ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç2Ô∏è‚É£\n", reply_markup=MBTI_KB)
    elif db.get_state(user_id) == "mbti_ans1":
        ans = message.text
        db.replace_state(user_id, "mbti_ans2")
        if ans == "1Ô∏è‚É£":
            db.replace_mbti(user_id, "E")
        elif ans == "2Ô∏è‚É£":
            db.replace_mbti(user_id, "I")
        await message.reply(MBTI2 + "1Ô∏è‚É£–ò–Ω—Ç—É–∏—Ç  üÜö  –°–µ–Ω—Å–æ—Ä–∏–∫2Ô∏è‚É£\n\n", reply_markup=MBTI_KB)
    elif db.get_state(user_id) == "mbti_ans2":
        ans = message.text
        db.replace_state(user_id, "mbti_ans3")
        if ans == "1Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "N")
        elif ans == "2Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "S")
        await message.reply(MBTI3 + "1Ô∏è‚É£–ß—É–≤—Å—Ç–≤–∞  üÜö  –õ–æ–≥–∏–∫–∞2Ô∏è‚É£\n\n", reply_markup=MBTI_KB)
    elif db.get_state(user_id) == "mbti_ans3":
        ans = message.text
        db.replace_state(user_id, "mbti_ans4")
        if ans == "1Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "F")
        elif ans == "2Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "T")
        await message.reply(MBTI4 + "1Ô∏è‚É£–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è  üÜö  –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ2Ô∏è‚É£\n\n", reply_markup=MBTI_KB)
    elif db.get_state(user_id) == "mbti_ans4":
        ans = message.text
        db.replace_state(user_id, "mbti_ans5")
        if ans == "1Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "P")
        elif ans == "2Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "J")
        await message.reply(MBTI5 + "1Ô∏è‚É£Turbulent  üÜö  Assertive2Ô∏è‚É£\n\n", reply_markup=MBTI_KB)
    elif db.get_state(user_id) == "mbti_ans5":
        ans = message.text
        db.replace_state(user_id, "tags")
        if ans == "1Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "T")
        elif ans == "2Ô∏è‚É£":
            db.replace_mbti(user_id, db.get_mbti(user_id) + "A")
        db.add_tags_str(user_id, TAGS_STR)
        l = str_tags_to_list(db.get_tags(user_id))
        print(l)
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=get_tags(l))
        await message.reply("–ö–∞–∫ –≤—ã–±–µ—Ä–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=TAGS_KB)
    elif db.get_state(user_id) == "tags" and message.text == "–í—ã–±—Ä–∞–ª":
        db.replace_state(user_id, "wait")
        db.replace_active(user_id, "True")
        await message.reply(get_profile(user_id), reply_markup=MENU_KB)


    # Edit Profile
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—åüìù" and db.get_state(user_id) == "wait":
        db.replace_state(user_id, "edit")
        await message.reply(get_profile(user_id) + f"\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:  ", reply_markup=PROFILE_KB)
    elif message.text == "–ò–º—è" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_name")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ")
    elif db.get_state(user_id) == "edit_name":
        if correct_name(message.text):
            db.replace_state(user_id, "wait")
            db.replace_name(user_id, message.text)
            await message.reply("–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!")
            await message.reply(get_profile(user_id), reply_markup=MENU_KB)
        else:
            await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
    elif message.text == "–ì–æ—Ä–æ–¥" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_city")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: ")
    elif db.get_state(user_id) == "edit_city" and message.text in CITIES:
        db.replace_state(user_id, "wait")
        db.replace_city(user_id, message.text)
        await message.reply("–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω!")
        await message.reply(get_profile(user_id), reply_markup=MENU_KB)
    elif message.text == "–í–æ–∑—Ä–∞—Å—Ç" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_age")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ")
    elif db.get_state(user_id) == "edit_age":
        if message.text.isdigit() and 18 <= int(message.text) <= 80:
            db.replace_state(user_id, "wait")
            db.replace_age(user_id, message.text)
            await message.reply("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!")
            await message.reply(get_profile(user_id), reply_markup=MENU_KB)
    elif message.text == "–û–ø–∏—Å–∞–Ω–∏–µ" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_desc")
        profile_list = db.get_my_profile(user_id)
        await message.reply(f"–ü—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {profile_list[5]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif db.get_state(user_id) == "edit_desc":
        db.replace_state(user_id, "wait")
        db.replace_description(user_id, message.text)
        await message.reply(get_profile(user_id), reply_markup=MENU_KB)
    elif message.text == "MBTI" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_mbti")
        profile_list = db.get_my_profile(user_id)
        await message.reply(f"–í–∞—à MBTI: {profile_list[6]}", reply_markup=EDIT_MBTI_KB)

    # HELP
    elif db.get_state(user_id) == "wait" and message.text == "–ü–æ–º–æ—â—åüí¨":
        db.replace_state(user_id, "help")
        await message.reply(f"–û—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n@gregoryexmachina", reply_markup=HELP_KB)
    elif db.get_state(user_id) == "help" and message.text == "–ù–∞–∑–∞–¥üîô":
        db.replace_state(user_id, "wait")
        await message.reply(f"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MENU_KB)

    # CHECK PROFILES
    elif db.get_state(user_id) == "wait" and message.text == "–ü–æ–∏—Å–∫üîé":
        await message.reply(f"–°–µ–≥–æ–¥–Ω—è –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∞–Ω–∫–µ—Ç—ã", reply_markup=profile_kb(user_id))


@dp.callback_query_handler()
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data
    if code == "user1":
        await bot.send_message(callback_query.from_user.id, text=str(code), reply_markup=RATE_PROFILE_KB)


if __name__ == '__main__':
    executor.start_polling(dp)
