from cities import Cities
from database import Database
from read_tags import Read_tags

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

TOKEN = "6167157380:AAEBoL1PRfL4HlauT1MOyTPHlbos_E9C9Sg"
cities_obj = Cities("other/russia.json")
CITIES = cities_obj.get_cities()
db = Database("user.db")


# FUNCTION
def correct_name(name):
    if len(name) <= 10 and name[0].isupper():
        return True
    return False


def correct_mbti(ans):
    if len(ans) == 3:
        for s in ans:
            if not (s == "–î" or s == "–ù"):
                return False
        return True
    else:
        return False


def right_letter(ans):
    if ans.count("–î") >= 2:
        return True
    return False


def get_profile(user_id):
    profile_list = db.get_my_profile(user_id)
    return f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞\n--------\n{profile_list[2]}\n{profile_list[3]}\n{profile_list[4]}\n{profile_list[5]}\n" \
           f"{profile_list[6]}\n–¢–µ–≥–∏\n-------------\n{profile_list[7]}"


def correct_input_tags(ans, rd, user_id):
    ans_list = ans.split(", ")
    rd_list = list(map(lambda s: s.replace("\n", ""), rd.get_tags_list()))
    print(ans_list)
    print(rd_list)
    for tag in ans_list:
        if tag not in rd_list:
            return False
    return True


def profile_kb(user1, user2, user3, user4, user5):
    profile_1 = InlineKeyboardButton(user1, callback_data='user1')
    profile_2 = InlineKeyboardButton(user2, callback_data='user2')
    profile_3 = InlineKeyboardButton(user3, callback_data='user3')
    profile_4 = InlineKeyboardButton(user4, callback_data='user4')
    profile_5 = InlineKeyboardButton(user5, callback_data='user5')

    CHECK_PROFILES_KB = InlineKeyboardMarkup(row_width=1)
    CHECK_PROFILES_KB.add(profile_1, profile_2, profile_3, profile_4, profile_5)

    return CHECK_PROFILES_KB



# BUTTONS
FORM_BTN = KeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
# ----
EDIT_NAME_BTN = KeyboardButton("–ò–º—è")
EDIT_CITY_BTN = KeyboardButton("–ì–æ—Ä–æ–¥")
EDIT_AGE_BTN = KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç")
EDIT_DESC_BTN = KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ")
EDIT_MBTI_BTN = KeyboardButton("MBTI")
MBTI_AGAIN_BTN = KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
EDIT_TAGS_BTN = KeyboardButton("–¢–µ–≥–∏")
# ----
SEARCH_BTN = KeyboardButton("–ü–æ–∏—Å–∫üîé")
PROFILE_BTN = KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—åüìù")
MATCH_BTN = KeyboardButton("Matchüë•")
HELP_BNT = KeyboardButton("–ü–æ–º–æ—â—åüí¨")
# ----
INTERESTS_BTN = KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã")
LIFESTYLE_BTN = KeyboardButton("–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏")
LIFEPOS_BTN = KeyboardButton("–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
NEEDS_BTN = KeyboardButton("–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")
MUSIC_BTN = KeyboardButton("–ú—É–∑—ã–∫–∞")
FILMS_BTN = KeyboardButton("–§–∏–ª—å–º—ã")
BOOKS_BTN = KeyboardButton("–ö–Ω–∏–≥–∏")
GAMES_BTN = KeyboardButton("–ò–≥—Ä—ã")
FOOD_BTN = KeyboardButton("–ï–¥–∞")
DEL_TAGS = KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥")

# ----
BACK_BTN = KeyboardButton("–ù–∞–∑–∞–¥üîô")
# ----
LIKE_BTN = KeyboardButton("‚ù§")
SKIP_BTN = KeyboardButton("‚ùå")

# KEYBOARDS
FORM_KB = ReplyKeyboardMarkup(resize_keyboard=True)
FORM_KB.add(FORM_BTN)
MENU_KB = ReplyKeyboardMarkup(resize_keyboard=True)
MENU_KB.add(SEARCH_BTN, MATCH_BTN, HELP_BNT, PROFILE_BTN)
CHECK_USERS = ReplyKeyboardMarkup(resize_keyboard=True)
EDIT_PROFILE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
EDIT_PROFILE_KB.add()

# ----
HELP_KB = ReplyKeyboardMarkup(resize_keyboard=True)
HELP_KB.add(BACK_BTN)
# ----
PROFILE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
PROFILE_KB.add(EDIT_NAME_BTN, EDIT_CITY_BTN, EDIT_AGE_BTN, EDIT_DESC_BTN, EDIT_MBTI_BTN, EDIT_TAGS_BTN)
# ----
EDIT_MBTI_KB = ReplyKeyboardMarkup(resize_keyboard=True)
EDIT_MBTI_KB.add(MBTI_AGAIN_BTN, BACK_BTN)
# TAGS
TAGS_KB = ReplyKeyboardMarkup(resize_keyboard=True)
TAGS_KB.add(INTERESTS_BTN, LIFESTYLE_BTN, LIFEPOS_BTN, NEEDS_BTN, MUSIC_BTN, FILMS_BTN, BOOKS_BTN, GAMES_BTN, FOOD_BTN,
            DEL_TAGS, BACK_BTN)

RATE_PROFILE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
RATE_PROFILE_KB.add(LIKE_BTN, SKIP_BTN)

# ACTIVE_KB = ReplyKeyboardMarkup(resize_keyboard=True)


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    db.add_user_state(user_id, "start", "False")
    db.add_user(user_id, username)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.username}!\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã "
                        f"–º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", reply_markup=FORM_KB)


@dp.message_handler(commands=['menu'])
async def menu_(message: types.Message):
    user_id = message.from_user.id
    db.replace_state(user_id, "wait")
    await message.reply(f"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MENU_KB)


@dp.message_handler()
async def info(message: types.Message):
    user_id = message.from_user.id

    # Input profile
    if message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É" and db.get_state(user_id) == "start":
        db.replace_state(user_id, "name")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    elif db.get_state(user_id) == "name":
        if correct_name(message.text):
            db.replace_state(user_id, "city")
            db.replace_name(user_id, message.text)
            await message.reply("–í–∞—à–µ –∏–º—è –ø—Ä–∏–Ω—è—Ç–æ!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        else:
            await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
    elif db.get_state(user_id) == "city":
        if message.text in CITIES:
            db.replace_state(user_id, "age")
            db.replace_city(user_id, message.text);
            await message.reply("–í–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        else:
            await message.reply(f"–ì–æ—Ä–æ–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n{', '.join(CITIES)}")
    elif db.get_state(user_id) == "age":
        if message.text.isdigit() and 18 <= int(message.text) <= 80:
            db.replace_state(user_id, "description")
            db.replace_age(user_id, message.text);
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ")
    elif db.get_state(user_id) == "description" or db.get_state(user_id) == "edit_mbti":
        if message.text != "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
            db.replace_description(user_id, message.text)
        db.replace_state(user_id, "mbti_ans1")
        db.replace_mbti(user_id, "")
        await message.reply("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ(–î–ù–î/–î–î–î/–ù–ù–î), –≥–¥–µ\n–î - –°–û–ì–õ–ê–°–ò–ï\n–ù - –ù–ï–°–û–ì–õ–ê–°–ò–ï")
        await message.reply("–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—ÇüîÑ–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç\n\n"
                            "1Ô∏è‚É£–í –∫–æ–º–ø–∞–Ω–∏—è—Ö –≤—ã –ª—é–±–∏—Ç–µ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è\n\n"
                            "2Ô∏è‚É£–í—ã —Å–∫–æ—Ä–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ—Ç–µ —Å–≤–µ—Ç—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–µ–∂–µ–ª–∏ –≤—Ä–µ–º—è –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π\n\n"
                            "3Ô∏è‚É£–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è '–∑–∞—Ä—è–∂–µ–Ω–Ω—ã–º' —ç–Ω–µ—Ä–≥–∏–µ–π –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤ –≥—Ä—É–ø–ø–µ –ª—é–¥–µ–π")
    elif db.get_state(user_id) == "mbti_ans1":
        ans = message.text
        if correct_mbti(ans):
            db.replace_state(user_id, "mbti_ans2")
            if right_letter(ans):
                db.replace_mbti(user_id, "E")
            else:
                db.replace_mbti(user_id, "I")

            await message.reply("–ò–Ω—Ç—É–∏—ÇüîÑ–°–µ–Ω—Å–æ—Ä–∏–∫\n\n"
                                "1Ô∏è‚É£–í–∞—à–∏ –º—ã—Å–ª–∏, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ —Å–æ–±—ã—Ç–∏—è—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞, –∞ –Ω–µ –Ω–∞ –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n\n"
                                "2Ô∏è‚É£–í—ã —á–∞—Å—Ç–æ —Ç—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ñ–∞–Ω—Ç–∞–∑–∏–∏\n\n"
                                "3Ô∏è‚É£–í–∞–º –Ω–µ –¥–∞—é—Ç –ø–æ–∫–æ—è –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã")
        else:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤  –Ω–µ—Ñ–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n" +
                                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ(–î–ù–î/–î–î–î/–ù–ù–î), –≥–¥–µ\n–î - –°–û–ì–õ–ê–°–ò–ï\n–ù - –ù–ï–°–û–ì–õ–ê–°–ò–ï")
    elif db.get_state(user_id) == "mbti_ans2":
        ans = message.text
        if correct_mbti(ans):
            db.replace_state(user_id, "mbti_ans3")
            if right_letter(ans):
                db.replace_mbti(user_id, db.get_mbti(user_id) + "N")
            else:
                db.replace_mbti(user_id, db.get_mbti(user_id) + "S")
            await message.reply("–ß—É–≤—Å—Ç–≤–∞üîÑ–õ–æ–≥–∏–∫–∞\n\n"
                                "1Ô∏è‚É£–í–æ –≤—Ä–µ–º—è —Å–ø–æ—Ä–∞ —á—É–≤—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–∂–Ω–µ–µ –ø—Ä–∞–≤–¥—ã\n\n"
                                "2Ô∏è‚É£–í–∞—à–∏ —ç–º–æ—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç –≤–∞—Å –±–æ–ª—å—à–µ, —á–µ–º –≤—ã –∏—Ö\n\n"
                                "3Ô∏è‚É£–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ª–æ–≥–∏–∫—É, –∞ –Ω–µ –ª–∏—á–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ —á—É–≤—Å—Ç–≤–∞")
        else:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤  –Ω–µ—Ñ–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n" +
                                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ(–î–ù–î/–î–î–î/–ù–ù–î), –≥–¥–µ\n–î - –°–û–ì–õ–ê–°–ò–ï\n–ù - –ù–ï–°–û–ì–õ–ê–°–ò–ï")
    elif db.get_state(user_id) == "mbti_ans3":
        ans = message.text
        if correct_mbti(ans):
            db.replace_state(user_id, "mbti_ans4")
            if right_letter(ans):
                db.replace_mbti(user_id, db.get_mbti(user_id) + "F")
            else:
                db.replace_mbti(user_id, db.get_mbti(user_id) + "T")
            await message.reply("–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—èüîÑ–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
                                "1Ô∏è‚É£–í—ã –ø—Ä–æ–¥—É–º—ã–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–æ—Å—É–≥–∞ –¥–æ –º–µ–ª–æ—á–µ–π\n\n"
                                "2Ô∏è‚É£–í—ã, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ, –±—É–¥–µ—Ç–µ –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ–∂–µ–ª–∏ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞\n"
                                "3Ô∏è‚É£–î–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –Ω–∞–ª–∏—á–∏–µ —á–µ—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–µ–ª, –Ω–µ–∂–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞")
        else:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤  –Ω–µ—Ñ–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n" +
                                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ(–î–ù–î/–î–î–î/–ù–ù–î), –≥–¥–µ\n–î - –°–û–ì–õ–ê–°–ò–ï\n–ù - –ù–ï–°–û–ì–õ–ê–°–ò–ï")
    elif db.get_state(user_id) == "mbti_ans4":
        ans = message.text
        if correct_mbti(ans):
            db.replace_state(user_id, "mbti_ans5")
            if right_letter(ans):
                db.replace_mbti(user_id, db.get_mbti(user_id) + "P")
            else:
                db.replace_mbti(user_id, db.get_mbti(user_id) + "J")
            await message.reply("TurbulentüîÑAssertive\n\n"
                                "1Ô∏è‚É£–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å—Ä–∞–∑—É –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n"
                                "2Ô∏è‚É£–í—ã —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ –ø–æ –ø–æ–≤–æ–¥—É —Ç–æ–≥–æ, —á—Ç–æ –¥—É–º–∞—é—Ç –æ –≤–∞—Å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏\n\n"
                                "3Ô∏è‚É£–í—ã —á–∞—Å—Ç–æ —Å–æ–∂–∞–ª–µ–µ—Ç–µ –æ —Å–≤–æ–∏—Ö –æ—à–∏–±–∫–∞—Ö")
        else:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤  –Ω–µ—Ñ–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n" +
                                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ(–î–ù–î/–î–î–î/–ù–ù–î), –≥–¥–µ\n–î - –°–û–ì–õ–ê–°–ò–ï\n–ù - –ù–ï–°–û–ì–õ–ê–°–ò–ï")
    elif db.get_state(user_id) == "mbti_ans5":
        ans = message.text
        if correct_mbti(ans):
            db.replace_state(user_id, "wait")
            db.replace_active(user_id, "True")
            if right_letter(ans):
                db.replace_mbti(user_id, db.get_mbti(user_id) + "T")
            else:
                db.replace_mbti(user_id, db.get_mbti(user_id) + "A")
            await message.reply(get_profile(user_id), reply_markup=MENU_KB)
        else:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –≤  –Ω–µ—Ñ–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n" +
                                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ(–î–ù–î/–î–î–î/–ù–ù–î), –≥–¥–µ\n–î - –°–û–ì–õ–ê–°–ò–ï\n–ù - –ù–ï–°–û–ì–õ–ê–°–ò–ï")



    # Edit Profile
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—åüìù" and db.get_state(user_id) == "wait":
        db.replace_state(user_id, "edit")
        await message.reply(get_profile(user_id) + f"\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:  ", reply_markup=PROFILE_KB)
    elif message.text == "–ò–º—è" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_name")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ")
    elif db.get_state(user_id) == "edit_name":
        if correct_name(message.text):
            db.replace_state(user_id, "wait")
            db.replace_name(user_id, message.text)
            await message.reply("–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!")
            await message.reply(get_profile(user_id), reply_markup=MENU_KB)
        else:
            await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
    elif message.text == "–ì–æ—Ä–æ–¥" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_city")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: ")
    elif db.get_state(user_id) == "edit_city" and message.text in CITIES:
        db.replace_state(user_id, "wait")
        db.replace_city(user_id, message.text)
        await message.reply("–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω!")
        await message.reply(get_profile(user_id), reply_markup=MENU_KB)
    elif message.text == "–í–æ–∑—Ä–∞—Å—Ç" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_age")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ")
    elif db.get_state(user_id) == "edit_age":
        if message.text.isdigit() and 18 <= int(message.text) <= 80:
            db.replace_state(user_id, "wait")
            db.replace_age(user_id, message.text)
            await message.reply("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!")
            await message.reply(get_profile(user_id), reply_markup=MENU_KB)
    elif message.text == "–û–ø–∏—Å–∞–Ω–∏–µ" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_desc")
        profile_list = db.get_my_profile(user_id)
        await message.reply(f"–ü—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {profile_list[5]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif db.get_state(user_id) == "edit_desc":
        db.replace_state(user_id, "wait")
        db.replace_description(user_id, message.text)
        await message.reply(get_profile(user_id), reply_markup=MENU_KB)
    elif message.text == "MBTI" and db.get_state(user_id) == "edit":
        db.replace_state(user_id, "edit_mbti")
        profile_list = db.get_my_profile(user_id)
        await message.reply(f"–í–∞—à MBTI: {profile_list[6]}", reply_markup=EDIT_MBTI_KB)
    elif db.get_state(user_id) == "edit_mbti" and message.text == "–ù–∞–∑–∞–¥üîô":
        db.replace_state(user_id, "edit")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:  ", reply_markup=PROFILE_KB)

    # HELP
    elif db.get_state(user_id) == "wait" and message.text == "–ü–æ–º–æ—â—åüí¨":
        db.replace_state(user_id, "help")
        await message.reply(f"–û—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n@gregoryexmachina", reply_markup=HELP_KB)
    elif db.get_state(user_id) == "help" and message.text == "–ù–∞–∑–∞–¥üîô":
        db.replace_state(user_id, "wait")
        await message.reply(f"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MENU_KB)

    # TAGS
    elif db.get_state(user_id) == "edit" and message.text == "–¢–µ–≥–∏":
        db.replace_state(user_id, "tags")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=TAGS_KB)
    elif db.get_state(user_id) == "tags" and message.text == "–ù–∞–∑–∞–¥üîô":
        db.replace_state(user_id, "wait")
        await message.reply(f"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MENU_KB)
    # del tag
    elif db.get_state(user_id) == "tags" and message.text == "–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥":
        db.replace_state(user_id, "del_tag")
        await message.reply(f"–¢–ï–ì–ò:\n{db.get_my_profile(user_id)[7]}\n-----------------\n"
                            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "del_tag":
        ans = message.text
        if ans in db.get_tags(user_id).split(", "):
            db.replace_state(user_id, "tags")
            tags_list = db.get_tags(user_id).split(", ")
            tags_list.remove(ans)
            db.add_tags(user_id, ", ".join(tags_list))
            await message.reply(f"–¢–µ–≥ —É–¥–∞–ª—ë–Ω\n---------------\n{get_profile(user_id)}", reply_markup=TAGS_KB)
        else:
            db.replace_state(user_id, "tags")
            await message.reply(f"–î–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ—Ç", reply_markup=TAGS_KB)
    # -----
    elif db.get_state(user_id) == "tags" and message.text == "–ò–Ω—Ç–µ—Ä–µ—Å—ã":
        db.replace_state(user_id, "edit_interests")
        tags = Read_tags("other/interests.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_interests":
        ans = message.text
        tags = Read_tags("other/interests.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–ú—É–∑—ã–∫–∞":
        db.replace_state(user_id, "edit_music")
        tags = Read_tags("other/music.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_music":
        ans = message.text
        tags = Read_tags("other/music.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–§–∏–ª—å–º—ã":
        db.replace_state(user_id, "edit_films")
        tags = Read_tags("other/films.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_films":
        ans = message.text
        tags = Read_tags("other/films.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–°–µ—Ä–∏–∞–ª—ã":
        db.replace_state(user_id, "edit_series")
        tags = Read_tags("other/series.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_films":
        ans = message.text
        tags = Read_tags("other/series.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–ö–Ω–∏–≥–∏":
        db.replace_state(user_id, "edit_books")
        tags = Read_tags("other/books.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_books":
        ans = message.text
        tags = Read_tags("other/books.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–ò–≥—Ä—ã":
        db.replace_state(user_id, "edit_games")
        tags = Read_tags("other/games.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_games":
        ans = message.text
        tags = Read_tags("other/games.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–ï–¥–∞":
        db.replace_state(user_id, "edit_food")
        tags = Read_tags("other/food.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_food":
        ans = message.text
        tags = Read_tags("other/food.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
    elif db.get_state(user_id) == "tags" and message.text == "–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è":
        db.replace_state(user_id, "edit_lifepos")
        tags = Read_tags("other/lifepos.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_lifepos":
        ans = message.text
        tags = Read_tags("other/lifepos.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏":
        db.replace_state(user_id, "edit_needs")
        tags = Read_tags("other/needs.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_needs":
        ans = message.text
        tags = Read_tags("other/needs.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    elif db.get_state(user_id) == "tags" and message.text == "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏":
        db.replace_state(user_id, "edit_lifestyle")
        tags = Read_tags("other/lifestyle.txt")
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –¢–µ–≥–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                            f"{''.join(tags.get_tags_list())}", reply_markup=types.ReplyKeyboardRemove())
    elif db.get_state(user_id) == "edit_lifestyle":
        ans = message.text
        tags = Read_tags("other/lifestyle.txt")
        if correct_input_tags(ans, tags, user_id):
            db.replace_state(user_id, "wait")
            if db.get_tags(user_id) is not None:
                db.add_tags(user_id, db.get_tags(user_id) + ", " + ans)
            else:
                db.add_tags(user_id, ans)
            await message.reply(f"–¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup=MENU_KB)
        else:
            await message.reply(
                f"–¢–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ/–≤–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—ç–≥/—Ç—ç–≥ —É–∂–µ –µ—Å—Ç—å\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

    # CHECK PROFILES

    elif db.get_state(user_id) == "wait" and message.text == "–ü–æ–∏—Å–∫üîé":
        db.replace_state(user_id, "search")
        p1 = db.get_random_profile(user_id)
        p2 = db.get_random_profile(user_id)
        p3 = db.get_random_profile(user_id)
        p4 = db.get_random_profile(user_id)
        p5 = db.get_random_profile(user_id)
        await message.reply(f"–°–µ–≥–æ–¥–Ω—è –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∞–Ω–∫–µ—Ç—ã", reply_markup=profile_kb(p1[2] + " " + p1[6], "2", "3", "4", "5"))




    # freeze and active profile
    # elif db.get_state(user_id) == "wait" and message.text == "–°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É":
    #     db.replace_active(user_id, "False")
    #     await message.reply(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–∫—Ä—ã—Ç–∞. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏.\n"
    #                         f"–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –í–∞—Å –Ω–µ –≤–∏–¥—è—Ç.\n"
    #                         f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∫ –Ω–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
    #                         reply_markup=ACTIVE_KB)
    # elif db.get_state(user_id) == "wait" and message.text == "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å":
    #     db.replace_active(user_id, "True")
    #     await message.reply(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ!", reply_markup=MENU_KB)



@dp.callback_query_handler()
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data
    print(code)
    if code == "user1":
        await bot.send_message(callback_query.from_user.id, reply_markup=RATE_PROFILE_KB)


if __name__ == '__main__':
    executor.start_polling(dp)
